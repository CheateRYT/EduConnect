generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int              @id @default(autoincrement())
  token                   String?
  role                    String           @default("STUDENT")
  name                    String
  login                   String           @unique
  password                String
  profilePicture          String?
  company                 String?
  bio                     String?
  courses                 Course[]         @relation("UserCourses")
  projects                Project[]        @relation("UserProjects")
  createdVacancies        Vacancy[]        @relation("UserVacancies")
  createdCourses          Course[]         @relation("CourseCreator")
  createdProjects         Project[]        @relation("ProjectCreator")
  givenRecommendations    Recommendation[] @relation("GiverRecommendations") // Связь с рекомендациями, которые пользователь дал
  receivedRecommendations Recommendation[] @relation("RecipientRecommendations") // Связь с рекомендациями, которые пользователь получил
  projectActions          ProjectAction[]  @relation("UserProjectActions") // Add this line for the relation to ProjectAction
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]   @relation("UserCourses")
  creatorId   Int
  creator     User     @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons     Lesson[] @relation("CourseLessons") // New relation to Lesson
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  videoUrl    String?
  courseId    Int
  course      Course   @relation("CourseLessons", fields: [courseId], references: [id])
}

model Project {
  id              Int             @id @default(autoincrement())
  title           String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  users           User[]          @relation("UserProjects")
  creatorId       Int
  creator         User            @relation("ProjectCreator", fields: [creatorId], references: [id])
  maxParticipants Int // Maximum number of participants
  isCompleted     Boolean         @default(false) // Indicates if the project is completed
  actions         ProjectAction[] @relation("ProjectActions") // Relation to actions taken on the project
}

model ProjectAction {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  repositoryUrl String?
  createdAt     DateTime @default(now())
  projectId     Int
  project       Project  @relation("ProjectActions", fields: [projectId], references: [id])
  userId        Int
  user          User     @relation("UserProjectActions", fields: [userId], references: [id]) // Updated relation field
}

model Vacancy {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  employerId     Int
  employer       User     @relation("UserVacancies", fields: [employerId], references: [id])
  salary         Float? // Зарплата (необязательный пункт)
  workFormat     String? // Формат работы (например, "Удаленная", "Офисная", "Гибридная")
  address        String? // Адрес (необязательный пункт)
  schedule       String? // График работы (например, "Полный рабочий день", "Частичная занятость")
  employmentType String? // Тип занятости (например, "Долгосрочный", "Временный", "Проектный")
}

model Recommendation {
  id          Int      @id @default(autoincrement())
  title       String
  rating      Int?
  description String?
  createdAt   DateTime @default(now())
  giverId     Int // Идентификатор пользователя, который дает рекомендацию
  giver       User     @relation("GiverRecommendations", fields: [giverId], references: [id]) // Связь с пользователем, который дает рекомендацию
  recipientId Int // Идентификатор пользователя, который получает рекомендацию
  recipient   User     @relation("RecipientRecommendations", fields: [recipientId], references: [id]) // Связь с пользователем, который получает рекомендацию
}
